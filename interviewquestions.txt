 


 

 
arrow and normal function difference . use let var , aaccsibility
 
css variable 
 
scss variable and all mixins and other questions
 
rem and em difference 
 
picture tag 
 
semantic tags 
 
doctype html
 
html input validation
 
uses of ES6
 
Debouncing classes ...default methods for object ..object properties 
 
Test cases 
 
Accessibility 
 
Currying 
 
Object.create object.assign 
 
Prototypal inheritance 
 
CORS
 
When you use promise and when you use callback 
 
How to know if object is a promise

To insert a dot after every two numbers in the given number, you can convert it to a string, use a regular expression to format it, and then log the result. Here’s how you can do it:

javascript
Copy code
const num = [1635613451];

// Convert the number to a string and use a regular expression to insert a dot every two characters
const formattedNum = num[0].toString().replace(/(\d{2})(?=\d)/g, '$1.');

console.log(formattedNum);

Here's a step-by-step breakdown of the code:

javascript
Copy code
(function(a) {
    return (function() {
        console.log(a);
        a = 23;
    })()
})(45);
The outer function is an Immediately Invoked Function Expression (IIFE), taking 45 as an argument. So, initially, a is 45.

Inside this function, another IIFE is immediately executed.

Inside this inner function:

console.log(a); is called before any reassignment, so it logs the current value of a, which is 45.
Then, a is assigned the value 23, but this has no effect on the output since the console.log statement already executed.
Output:
javascript
Copy code
45
The output is 45. The reassignment of a to 23 does not affect the logged value because it happens after console.log(a);.

In JavaScript, when you use objects as keys in another object (like x[y] and x[z] in this case), they are implicitly converted to strings. Specifically, when objects are converted to strings, they become "[object Object]". Therefore, both x[y] and x[z] refer to the same property: x["[object Object]"].

Here’s how the code executes step-by-step:

Initialize variables:

javascript
Copy code
let x = {}, y = {name: "Ronny"}, z = {name: "John"};
Assign x[y] = {name: "Vivek"}: Since y is an object, x[y] is equivalent to x["[object Object]"] = {name: "Vivek"}.

Assign x[z] = {name: "Akki"}: Similarly, x[z] is also converted to x["[object Object]"]. So this assignment overwrites the previous value, and now x["[object Object]"] = {name: "Akki"}.

Log console.log(x[y]);: Since x[y] is equivalent to x["[object Object]"], this will log { name: "Akki" }.

Final Output:
javascript
Copy code
{ name: "Akki" }
The output will be:

javascript
Copy code
{ name: "Akki" }
Both x[y] and x[z] refer to the same property in x due to the string conversion, causing the second assignment
 to overwrite the first.

To check if an object is empty in JavaScript, you can use Object.keys(), Object.values(), or Object.entries() to get an array of the object's properties and see if its length is zero.

Example using Object.keys()
javascript
Copy code
const obj = {};

if (Object.keys(obj).length === 0) {
    console.log("The object is empty");
} else {
    console.log("The object is not empty");
}
Alternative Methods
Using Object.values():

javascript
Copy code
if (Object.values(obj).length === 0) {
    console.log("The object is empty");
}
Using Object.entries():

javascript
Copy code
if (Object.entries(obj).length === 0) {
    console.log("The object is empty");
}
Each of these methods works well to check if an object has no properties.


 To iterate over an object in JavaScript, you can use several methods, depending on your needs. Here are a few common ways:

1. Using for...in Loop
The for...in loop iterates over all enumerable properties of an object.

javascript
Copy code
const obj = { a: 1, b: 2, c: 3 };

for (let key in obj) {
    if (obj.hasOwnProperty(key)) { // Optional check for own properties
        console.log(`${key}: ${obj[key]}`);
    }
}
2. Using Object.keys() with forEach
Object.keys() returns an array of the object's own property keys, which you can iterate over with forEach.

javascript
Copy code
const obj = { a: 1, b: 2, c: 3 };

Object.keys(obj).forEach(key => {
    console.log(`${key}: ${obj[key]}`);
});
3. Using Object.entries() with forEach
Object.entries() returns an array of key-value pairs, making it easy to work with both keys and values directly.

javascript
Copy code
const obj = { a: 1, b: 2, c: 3 };

Object.entries(obj).forEach(([key, value]) => {
    console.log(`${key}: ${value}`);
});
4. Using for...of with Object.entries()
With for...of, you can destructure each key-value pair for easy access.

javascript
Copy code
const obj = { a: 1, b: 2, c: 3 };

for (const [key, value] of Object.entries(obj)) {
    console.log(`${key}: ${value}`);
}
Each of these methods will allow you to iterate over the properties in the object effectively.